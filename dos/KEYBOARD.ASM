section .text

;1F73 'w' / 'W'(unsure atm??)
;1177 's' / 'S' 
;1E61 'a' / 'A'
;2064 'd' / 'D'

get_key:
	xor ax, ax ;0 ax reg
	mov ah, 000h ;check if key pressed without stopping program
	int 16h ;keyboard read interrupt
	ret

move_player_d: ;this is called which does the 'd' key check first, then runs downwards through key funcs
	cmp ax, 02064h ;test if 'd' is pressed
	je inc_x_player ;if 'd' is pressed, x += 1

move_player_a:
	cmp ax, 01E61h ;test if 'a' is pressed
	je dec_x_player ;if 'a' is  pressed, x -= 1

move_player_w:
	cmp ax, 01F73h ;test if 'w' is pressed
	je inc_y_player ;if 'w' is pressed, y += 1

move_player_s:
	cmp ax, 01177h ;test if 's' is pressed
	je dec_y_player ;if 's' is  pressed, y -= 1

move_player_ret: ;must call the key press condition is not met (for program flow)
	ret ;return out of the move_player_[X] func as we call it 

;orig_[X] and [X] must be kept synced, always change both
inc_x_player:
	mov ax, [pos_array+00h]
	add ax, 02h ; x += 1
	mov [pos_array+00h], ax
	mov ax, [pos_array+04h]
	inc ax ; orig_x += 1
	mov [pos_array+04h], ax
	ret

dec_x_player:
	mov ax, [pos_array+00h]
	sub ax, 02h ; x -= 1
	mov [pos_array+00h], ax
	mov ax, [pos_array+04h]
	dec ax ; orig_x -= 1
	mov [pos_array+04h], ax
	ret

inc_y_player:
	mov ax, [pos_array+02h]
	add ax, 02h ; y += 1
	mov [pos_array+02h], ax
	mov ax, [pos_array+06h]
	inc ax ; y += 1
	mov [pos_array+06h], ax
	ret

dec_y_player:
	mov ax, [pos_array+02h]
	sub ax, 02h ; y -= 1
	mov [pos_array+02h], ax
	mov ax, [pos_array+06h]
	dec ax ; orig_y -= 1
	mov [pos_array+06h], ax
	ret

section .data ;put data here
	
section .bss ;put uninit data here